
--------------------------------------------------------------------------------

######### PROBLEM LOG #########

--------------------------------------------------------------------------------

DATE: 3/4/2024
Problem: still need to make ft_ra & ft_rra. Functions missing.
Solved: yes.

--------------------------------------------------------------------------------

DATE: 3/4/2024
Problem: unsure? too many pushes from a to b, not printing any operations in between.
Solved: not fully, but found out that ft_initialize_list had a mistake. still loop issue after pushing everything from a to b.
Changed: pass the size of temp_stack to ft_initialize_list and use a for loop to iterate over the array
while (temp_stack[i])
to:
while (i < size)

--------------------------------------------------------------------------------

DATE: 3/4/2024
Problem: with example array, array is rb when not supposed to.
Solved: yes
Changed: found error in rotate_to_last_first, swapped conditions.
NOTE: check ft_rrotate_to_first and last: are those conditions correct or also swapped?? <---------------!!!!!!!!!!!

--------------------------------------------------------------------------------

DATE: 3/4/2024
Problem: infinite loop after pushing everything from stack_a to stack_b
Solved: yes
Changed: -

--------------------------------------------------------------------------------

DATE: 4/4/2024
Problem: Suddenly another infinite loop in first part of the code.
Solved: yes
Changed:
function to track size of stacks was incorrect: was always one too big.
function to find closest numbers in top and bottom were incorrect: moved the part of moving to the next element to end of the loop (skipped first element before).
function ft_equal had error to calculate distance to bottom: we added + 1 to equal that distance to the top starts at 1.
again mistake in how often to rotate: updated (for good?), not sure this is the last time i have to change this.

--------------------------------------------------------------------------------

DATE: 4/4/2024
Problem: void ft_search_lowest(t_list **stack, t_track *track)
Solved: yes
Changed:
tried to access out of bound memory, change if condition from:
if (temp->next->value > temp->value)
to:
if (temp->value < track->lowest_value)

--------------------------------------------------------------------------------

DATE: 4/4/2024
Problem: it doesnt sort properly 
Solved:  yes
Changed:
- ft_check_3 wasnt sorting properly. changed it completely and also updated ft_search_lowest, because the index of the to be checked stack might not be up to date when it starts, now it is.
- index for closest found value was wrong
- rotation and reverse rotation always one too many.
fixed now.
--------------------------------------------------------------------------------

DATE: 10/4/2024
Problem: initial checks for errors are not working
Solved: yes
Changed:
Now also accepts negative numeric (forgot to add the '-')
Removed unnecessary and wrong function that checks INT_MIN and INT_MAX.
Correctly frees stack now if error is encountered.
Temporarily added extra info to the printf on what error, musnt forget to remove for final version (just "Error").

--------------------------------------------------------------------------------

DATE: 10/4/2024
Problem: Doesnt work when we send a 0 in the list?!
Solved: yes
Changed:
Many mistakes when using a while loop and argc. all up to date for now.
--------------------------------------------------------------------------------

DATE: 10/4/2024
Problem: Must accept input as ./push_swap "10 8 12" and ./push_swap 10 8 12.
Solved: yes
Changed:
Added str_join before split to mimic the behaviour of the first string in argv being the programs name, so i did not have to alter all the other functions. 

--------------------------------------------------------------------------------

DATE: 15/04/2024
Problem: when a stack of 3 is in descending, it unnecessarily rotates and reverse rotates once. 
Solved: yes
Changed:
made if condition for every option since 3! = 6, so not too much to check all separate.

--------------------------------------------------------------------------------

DATE: 15/04/2024
Problem: When array size is bigger than 200 random numbers, nr of operations is too big. change algorithm.
Solved: no
Changed: created a v2, working on finding the most cheap number to push before pushing something from a to b

--------------------------------------------------------------------------------

DATE: 16/04/2024
Problem: size of stack_b is not being updated correctly: check all functions that use track->size_b and a for security
Solved: yes
Changed:
if statement was incorrect. when rotating to the last position if statement was if index is < size, but it should be if index is < size - 1.
--------------------------------------------------------------------------------

DATE: 18/04/2024
Problem: code works but it never seems to favor any other element than [0] from stack_a to be pushed. least amount of operations needs to be updated somewhere, but not sure where. favours a higher number?? dont understand.
Solved: yes
Changed:
forgot to reset stack_b after inner while loop.

--------------------------------------------------------------------------------
 
DATE: 21/04/2024
Problem: Currently calculating for EVERY number in the list total operations and choosing that one, but that does not sort. need to find correct location in B and only for that location count operations. then compare those to all others.
Solved: yes
Changed:
moved counting operations to outside innerloop.
--------------------------------------------------------------------------------
 
DATE: 21/04/2024
Problem: if stack_b is descing and stack_a is lower it wil do unnecessary rotations/wrong order.
Solved: yes
Changed:
made extra function that checked if stack_b was descending and if last value of b is higher, then its okay to just push.

--------------------------------------------------------------------------------
 
DATE: 21/04/2024
Problem: example: if track size = 3, border is 2, problematic for splitting size inhalf.
also not taking into calculating if during find lowest if the index = same as border. need to add that to either < or > (need to make sure pick right one.)
Solved: unsure?
Changed:

--------------------------------------------------------------------------------
 
DATE: 21/04/2024
Problem: rrb 1 time short in ft_rotate_to_last_b.
Solved: yes
Changed: problems regarding size of stack b being uneven or even to count operations for reverse rotating. added extra variable that stores total operations needed for b, and decrement that when rrb. 

--------------------------------------------------------------------------------
 

 TESTING COMMANDS:
 ARG="4 67 3 87 23"; ./push_swap $ARG | wc -l
 ARG="4 67 3 87 23"; ./push_swap $ARG | ./checker_Mac $ARG

  ARG="-432 -420 0 438 -24 205 -51 142 -188 -370 -368 -416 -103 -468 268 -413 152 -111 -454 382 -235 -232 166 110 476 56 490 -68 -296 250 419 352 364 146 461 -467 498 190 236 -316 5 -482 478 -139 -359 468 201 -131 -379 -459 194 335 -443 -243 -448 135 -293 -372 20 136 -155 15 433 496 27 113 150 108 404 -85 -237 -60 176 -286 220 170 -44 -349 77 383 78 263 180 -352 -276 -38 430 74 -425 -21 -399 -477 317 -357 -143 -278 282 278 134 -417 -71 -236 -282 9 -112 -403 61 -366 265 165 405 -153 -437 -344 307 163 219 -354 -409 -151 296 -484 -388 227 82 259 279 -469 267 167 -408 -378 -465 -371 -462 22 386 293 483 -474 -238 133 294 375 139 23 -86 -217 489 499 -312 -473 -35 -128 464 -162 -317 341 245 -321 -361 270 -33 -67 472 392 256 463 232 -164 -447 302 439 354 -59 -29 75 -339 -58 246 400 -348 -197 164 -476 -45 -287 36 -25 197 -263 -115 -363 -231 240 -429 -456 411 437 -14 374 -192 153 -40 103 324 -158 -271 337 243 -130 455 -335 241 233 -141 334 -147 407 458 275 -146 44 86 177 59 237 71 4 -274 -233 -166 -343 359 238 -4 -107 -11 -57 -387 -221 -268 -479 315 488 -90 -310 329 18 85 33 -452 465 -113 -18 122 -350 161 -351 155 -262 -258 -260 -427 494 63 -99 349 -62 -292 272 -455 417 -257 -453 -219 2 448 -421 421 -212 118 -489 -182 -122 212 49 208 -210 -355 366 -152 -82 416 19 -49 127 -47 -256 485 160 184 -118 -311 -42 -170 -385 -325 111 -393 117 409 -500 66 -494 6 -117 -295 -384 -242 119 365 -223 -342 235 37 -7 -175 84 70 408 -157 -340 339 172 -449 -255 -26 457 230 -77 46 -380 -50 90 -318 306 487 319 -498 31 -171 -195 491 -168 -174 -189 -300 -92 -181 -422 -283 -390 -201 -119 373 -431 -23 25 -209 202 420 -284 -457 283 -364 -142 -440 114 402 443 -88 -9 -100 128 -3 379 -196 188 493 300 231 -132 -433 248 257 -329 -488 -41 423 -461 -200 -12 -301 -206 304 362 -73 -27 14 311 96 -496 314 449 -10 178 -327 291 321 -94 -227 -251 -406 -434 358 -254 -304 -167 395 320 -244 116 434 -177 -190 -298 24 -224 -436 93 64 -445 -126 -106 368 -240 452 387 432 217 55 -169 221 446 200 258 73 168 -161 174 297 169 -127 -475 -493 8 104 12 310 81 -397 -333 313 -424 -358 226 394 138 -426 -492 403 389 410 266 399 -8 -102 290 11 486 475 -313 126 -185 -247 223 -332 260 -61"; ./push_swap $ARG | wc -l
  

  ARG="-432 -420 0 438 -24 205 -51 142 -188 -370 -368 -416 -103 -468 268 -413 152 -111 -454 382 -235 -232 166 110 476 56 490 -68 -296 250 419 352 364 146 461 -467 498 190 236 -316 5 -482 478 -139 -359 468 201 -131 -379 -459 194 335 -443 -243 -448 135 -293 -372 20 136 -155 15 433 496 27 113 150 108 404 -85 -237 -60 176 -286 220 170 -44 -349 77 383 78 263 180 -352 -276 -38 430 74 -425 -21 -399 -477 317 -357 -143 -278 282 278 134 -417 -71 -236 -282 9 -112 -403 61 -366 265 165 405 -153 -437 -344 307 163 219 -354 -409 -151 296 -484 -388 227 82 259 279 -469 267 167 -408 -378 -465 -371 -462 22 386 293 483 -474 -238 133 294 375 139 23 -86 -217 489 499 -312 -473 -35 -128 464 -162 -317 341 245 -321 -361 270 -33 -67 472 392 256 463 232 -164 -447 302 439 354 -59 -29 75 -339 -58 246 400 -348 -197 164 -476 -45 -287 36 -25 197 -263 -115 -363 -231 240 -429 -456 411 437 -14 374 -192 153 -40 103 324 -158 -271 337 243 -130 455 -335 241 233 -141 334 -147 407 458 275 -146 44 86 177 59 237 71 4 -274 -233 -166 -343 359 238 -4 -107 -11 -57 -387 -221 -268 -479 315 488 -90 -310 329 18 85 33 -452 465 -113 -18 122 -350 161 -351 155 -262 -258 -260 -427 494 63 -99 349 -62 -292 272 -455 417 -257 -453 -219 2 448 -421 421 -212 118 -489 -182 -122 212 49 208 -210 -355 366 -152 -82 416 19 -49 127 -47 -256 485 160 184 -118 -311 -42 -170 -385 -325 111 -393 117 409 -500 66 -494 6 -117 -295 -384 -242 119 365 -223 -342 235 37 -7 -175 84 70 408 -157 -340 339 172 -449 -255 -26 457 230 -77 46 -380 -50 90 -318 306 487 319 -498 31 -171 -195 491 -168 -174 -189 -300 -92 -181 -422 -283 -390 -201 -119 373 -431 -23 25 -209 202 420 -284 -457 283 -364 -142 -440 114 402 443 -88 -9 -100 128 -3 379 -196 188 493 300 231 -132 -433 248 257 -329 -488 -41 423 -461 -200 -12 -301 -206 304 362 -73 -27 14 311 96 -496 314 449 -10 178 -327 291 321 -94 -227 -251 -406 -434 358 -254 -304 -167 395 320 -244 116 434 -177 -190 -298 24 -224 -436 93 64 -445 -126 -106 368 -240 452 387 432 217 55 -169 221 446 200 258 73 168 -161 174 297 169 -127 -475 -493 8 104 12 310 81 -397 -333 313 -424 -358 226 394 138 -426 -492 403 389 410 266 399 -8 -102 290 11 486 475 -313 126 -185 -247 223 -332 260 -61"; ./push_swap $ARG | ./checker_Mac $ARG

